generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  tier          TIER      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  files         File[]
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  subscriptions Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model File {
  id               String     @id @default(cuid())
  originalName     String
  uniqueName       String     @unique
  url              String
  mimetype         String
  size             Int
  uploadedAt       DateTime   @default(now())
  expiresAt        DateTime
  status           FileStatus @default(ACTIVE)
  userId           String?
  tier             TIER       @default(ANONYMOUS)
  password         String?
  downloadCount    Int        @default(0)
  lastDownloadedAt DateTime?
  user             User?      @relation(fields: [userId], references: [id])
}

enum FileStatus {
  ACTIVE
  EXPIRED
  DELETED
}

model Payment {
  id                    String            @id @default(cuid())
  userId                String
  razorpayPaymentId     String?
  razorpayOrderId       String?
  razorpaySubscriptionId String?
  amount                Int
  currency              String            @default("USD")
  status                PaymentStatus     @default(PENDING)
  tier                  TIER
  subscriptionType      SubscriptionType  @default(ONE_TIME)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id                    String              @id @default(cuid())
  userId                String
  razorpaySubscriptionId String             @unique
  tier                  TIER
  status                SubscriptionStatus  @default(ACTIVE)
  startDate             DateTime            @default(now())
  endDate               DateTime?
  nextBillingDate       DateTime?
  amount                Int
  currency              String              @default("USD")
  billingCycle          BillingCycle        @default(MONTHLY)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum TIER {
  ANONYMOUS
  FREE
  PRO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum SubscriptionType {
  ONE_TIME
  RECURRING
}

enum BillingCycle {
  MONTHLY
  YEARLY
}
